name: Deploy ttasup-frontend to S3

on:
  push:
    branches:
      - develop # 브랜치가 develop일 때 실행

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: family # 모든 run 명령어가 family 폴더에서 실행

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 2. Yarn 캐시 디렉토리 경로 가져오기
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      # 3. Yarn 캐시 설정
      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        id: yarn-cache # `cache-hit` 여부를 확인하는데 사용 ==> if: steps.yarn-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # 4. Yarn을 사용하여 의존성 설치
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # 5. Next.js 프로젝트 빌드
      - name: Build Next.js # next.config.js의 output: 'export' 설정에 따라 'out' 폴더가 'family/out' 경로에 생성됨
        run: yarn build

      # 6. AWS 자격 증명 설정 (Github Secret에 미리 설정해둠)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      # 7. S3 버킷과 동기화
      - name: Sync to S3
        # 'family/out' 폴더의 내용을 S3 버킷에 동기화하는 과정
        run: aws s3 sync ./out s3://${{ secrets.S3_BUCKET_NAME }} --delete

      # 8. CloudFront 캐시 무효화 
      - name: Invalidate CloudFront cache
        if: success()
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
